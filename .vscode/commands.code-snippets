{
	// Place your Shinano workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"ChatInputCommand": {
		"scope": "typescript",
		"prefix": "cim",
		"description": "Create a Chat Input Command",
		"body": [
			"import { ChatInputCommand } from \"../../structures/Command\";\n",

			"export default new ChatInputCommand({",
			"\tname: \"\",",
			"\tdescription: \"\",",
			"\tcooldown: 1000,",
			"\tcategory: \"\",",
			"\toptions: [],",
			"\trun: async ({ interaction, }) => {},",
			"});"
		]
	},

	"MessageCommand": {
		"scope": "typescript",
		"prefix": "mc",
		"description": "Create an Message Context Menu Command",
		"body": [
			"import { MessageCommand } from \"../../../structures/Command\";",
			"import { ApplicationCommandType } from \"discord.js\";\n",

			"export default new MessageCommand({",
			"\tname: \"\"",
			"\tcooldown: 1000",
			"\ttype: ApplicationCommandType.Message",
			"\trun: async({ interaction }) => {}",
			"})"
		]
	},
	
	"UserCommand": {
		"scope": "typescript",
		"prefix": "uc",
		"description": "Create an User Context Menu Command",
		"body": [
			"import { UserCommand } from \"../../../structures/Command\";",
			"import { ApplicationCommandType } from \"discord.js\";\n",

			"export default new UserCommand({",
			"\tname: \"\"",
			"\tcooldown: 1000",
			"\ttype: ApplicationCommandType.User",
			"\trun: async({ interaction }) => {}",
			"})"
		]
	}
}